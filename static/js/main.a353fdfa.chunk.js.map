{"version":3,"sources":["Quote.js","App.js","serviceWorker.js","index.js"],"names":["Quote","props","getAnotherQuote","getQuote","state","quote","author","this","axios","get","then","resp","data","quotes","randomQuote","Math","floor","random","length","setState","id","className","onClick","Component","App","src","alt","style","height","width","color","position","top","left","transform","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"yUAqDeA,G,wDA/Cd,WAAaC,GAAQ,IAAD,8BACnB,cAAMA,IA0BPC,gBAAkB,WACjB,EAAKC,YA1BL,EAAKC,MAAO,CACXC,MAAO,GACPC,OAAQ,IAJU,E,gEASnBC,KAAKJ,a,iCAGK,IAAD,OAETK,IAAMC,IADE,0IAENC,MAAK,SAAAC,GACL,IAAIC,EAAOD,EAAKC,KAAKC,OAEjBC,EAAcF,EADHG,KAAKC,MAAMD,KAAKE,SAAWL,EAAKM,SAG/C,EAAKC,SAAS,CACbd,MAAOS,EAAW,MAClBR,OAAQQ,EAAW,c,+BASZ,IAAD,EACeP,KAAKH,MAAtBC,EADE,EACFA,MAAOC,EADL,EACKA,OAEd,OACC,yBAAKc,GAAG,WACR,wBAAIC,UAAU,SAAd,kCACC,yBAAKD,GAAG,aACR,yBAAKA,GAAG,aAAY,2BAAIf,IACxB,yBAAKe,GAAG,UAAS,4BAAKd,IACtB,4BAAQc,GAAG,gBAAgBC,UAAU,UAAUC,QAASf,KAAKL,iBAA7D,uB,GAzCgBqB,cCkBLC,G,6KARd,OACA,6BACC,yBAAKC,IAAI,qCAAqCC,IAAI,cAAcC,MAAO,CAACC,OAAQ,OAAQC,MAAM,UAC7F,wBAAIF,MAVW,CACfG,MAAO,QACJC,SAAU,WACVC,IAAK,MACNC,KAAM,MACNC,UAAW,0BAKS,kBAAC,EAAD,Y,GAZPX,cCMEY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAQC,SAASC,eAAe,SD6H1C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpC,MAAK,SAAAqC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.a353fdfa.chunk.js","sourcesContent":["import React from 'react';\r\nimport {Component} from 'react';\r\nimport axios from 'axios';\r\nimport './Quote.css';\r\n\r\nclass Quote extends Component {\r\n\tconstructor (props) {\r\n\t\tsuper(props)\r\n\t\tthis.state ={\r\n\t\t\tquote: '',\r\n\t\t\tauthor: ''\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidMount(){\r\n\t\tthis.getQuote();\r\n\t}\r\n\r\n\tgetQuote(){\r\n\t\tlet url='https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json'\r\n\t\taxios.get(url)\r\n\t\t\t.then(resp => {\r\n\t\t\t\tlet data = resp.data.quotes\r\n\t\t\t\tlet quoteNum = Math.floor(Math.random() * data.length)\r\n\t\t\t\tlet randomQuote = data[quoteNum]\r\n\r\n\t\t\t\tthis.setState({\r\n\t\t\t\t\tquote: randomQuote['quote'],\r\n\t\t\t\t\tauthor: randomQuote['author']\r\n\t\t\t\t})\r\n\t\t\t})\r\n\t}\r\n\r\n\tgetAnotherQuote = () => {\r\n\t\tthis.getQuote();\r\n\t}\r\n\r\n\trender () {\r\n\t\tconst {quote, author} = this.state;\r\n\r\n\t\treturn (\r\n\t\t\t<div id='wrapper'>\r\n\t\t\t<h1 className='title'>Your daily inspirational quote</h1>\r\n\t\t\t\t<div id='quote-box'>\r\n\t\t\t\t<div id='the-quote'><p>{quote}</p></div>\r\n\t\t\t\t<div id='author'><h5>{author}</h5></div>\r\n\t\t\t\t<button id='another-quote' className='buttons' onClick={this.getAnotherQuote}>Another Quote</button>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t)\r\n\t}\r\n}\r\n\r\nexport default Quote;","import React from 'react';\nimport {Component} from 'react';\nimport Quote from './Quote';\n\nimport './App.css';\n\nclass App extends Component {\n\trender (){\n\t\tvar textStyle = {\n\t\t\tcolor: 'white',\n\t\t    position: 'absolute', \n\t\t    top: '50%',\n  \t\t\tleft: '50%',\n  \t\t\ttransform: 'translate(-50%, -50%)'\n        };\n\treturn (\n\t<div >\n \t<img src='https://source.unsplash.com/random' alt='backgrounds' style={{height: '100%', width:'100%'}}/>\n \t <h1 style={textStyle}><Quote /></h1>\n \t</div>\n  )\n}\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />,document.getElementById('root') \n\t);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}